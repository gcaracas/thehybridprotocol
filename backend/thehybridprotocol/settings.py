"""
Django settings for thehybridprotocol project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-_0ua6o+01gz@3@$0jj-5r(w0-$#+am7k@b9atkt=@kjkn=6j&7')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,.up.railway.app,thehybridprotocol-production.up.railway.app', cast=lambda v: [s.strip() for s in v.split(',')])

# Base URL for absolute URLs (used in API responses)
BASE_URL = config('BASE_URL', default='http://localhost:8000' if DEBUG else 'https://thehybridprotocol-production.up.railway.app')

# PostgreSQL database now configured - data will persist!
# Fix: Ensure Railway services are properly connected


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'rest_framework',
    'corsheaders',
    'ckeditor',
    
    # Local apps
    'core',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'thehybridprotocol.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'thehybridprotocol.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Database configuration using dj-database-url
import dj_database_url

DATABASES = {
    'default': dj_database_url.config(
        default='sqlite:///db.sqlite3',  # fallback for local dev
        conn_max_age=600
    )
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Additional static files directories (only if the directory exists)
STATICFILES_DIRS = []
static_dir = os.path.join(BASE_DIR, 'static')
if os.path.exists(static_dir):
    STATICFILES_DIRS.append(static_dir)

# WhiteNoise configuration for serving static files in production
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# WhiteNoise settings
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = DEBUG

# Media files (uploads)
MEDIA_URL = '/media/'

# Use Railway volume in production, local directory in development
if DEBUG:
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
else:
    # Railway volume mount path
    MEDIA_ROOT = '/app/media'

# Ensure media directory exists and is writable
if not os.path.exists(MEDIA_ROOT):
    try:
        os.makedirs(MEDIA_ROOT, exist_ok=True)
        print(f"üîç DEBUG: Created media directory: {MEDIA_ROOT}")
    except Exception as e:
        print(f"üîç DEBUG: Failed to create media directory: {e}")
        # Fallback for development
        if DEBUG:
            fallback_media = os.path.join(BASE_DIR, 'media_fallback')
            try:
                os.makedirs(fallback_media, exist_ok=True)
                MEDIA_ROOT = fallback_media
                print(f"üîç DEBUG: Using fallback media directory: {MEDIA_ROOT}")
            except Exception as fallback_e:
                print(f"üîç DEBUG: Failed to create fallback media directory: {fallback_e}")

# Debug media directory (only in development)
if DEBUG:
    print(f"üîç DEBUG: MEDIA_ROOT = {MEDIA_ROOT}")
    print(f"üîç DEBUG: Media directory exists: {os.path.exists(MEDIA_ROOT)}")
    if os.path.exists(MEDIA_ROOT):
        print(f"üîç DEBUG: Media directory writable: {os.access(MEDIA_ROOT, os.W_OK)}")
        try:
            print(f"üîç DEBUG: Media directory contents: {os.listdir(MEDIA_ROOT)}")
        except PermissionError:
            print("üîç DEBUG: Cannot list media directory contents (permission denied)")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

# CORS settings
CORS_ALLOWED_ORIGINS = config(
    'CORS_ALLOWED_ORIGINS', 
    default='http://localhost:3000,http://127.0.0.1:3000,https://thehybridprotocol-production.up.railway.app',
    cast=lambda v: [s.strip() for s in v.split(',')]
)

# CSRF settings - always set trusted origins
CSRF_TRUSTED_ORIGINS = config(
    'CSRF_TRUSTED_ORIGINS',
    default='https://thehybridprotocol-production.up.railway.app,http://localhost:8000,http://127.0.0.1:8000',
    cast=lambda v: [s.strip() for s in v.split(',') if s.strip()]
)

# Debug CSRF settings (only in development)
if DEBUG:
    print(f"üîç DEBUG: CSRF_TRUSTED_ORIGINS = {CSRF_TRUSTED_ORIGINS}")
    print(f"üîç DEBUG: DEBUG = {DEBUG}")

# Additional CORS settings for production
if not DEBUG:
    # Additional production-specific CORS settings
    pass

CORS_ALLOW_CREDENTIALS = True

# Additional CORS settings for better compatibility
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Only allow all origins in development
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https://.*\.up\.railway\.app$",  # Allow all Railway subdomains
] if not DEBUG else []

# For development, allow all origins (remove in production)
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True

# CKEditor Configuration
# Note: CKEditor 4.22.1 has known security vulnerabilities
# Consider upgrading to CKEditor 5 or CKEditor 4 LTS in production
# For now, we're using the latest available django-ckeditor version
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Bold', 'Italic', 'Underline', 'Strike'],
            ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent'],
            ['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
            ['Link', 'Unlink'],
            ['RemoveFormat', 'Source'],
            ['Format', 'Font', 'FontSize'],
            ['TextColor', 'BGColor'],
            ['Table', 'HorizontalRule', 'SpecialChar'],
            ['Maximize']
        ],
        'height': 300,
        'width': '100%',
        'removePlugins': 'stylesheetparser,flash,iframe,forms,div,showblocks,newpage,save,preview,print,templates,cut,copy,paste,pastetext,pastefromword,find,replace,selectall,scayt,spellchecker',
        'allowedContent': True,
        'extraAllowedContent': 'span(*)',
        'extraPlugins': 'autogrow',
        'autoGrow_minHeight': 300,
        'autoGrow_maxHeight': 800,
    },
    'newsletter': {
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Bold', 'Italic', 'Underline'],
            ['NumberedList', 'BulletedList'],
            ['Link', 'Unlink'],
            ['RemoveFormat'],
            ['Format', 'FontSize'],
            ['Table'],
            ['Maximize']
        ],
        'height': 400,
        'width': '100%',
        'removePlugins': 'stylesheetparser,flash,iframe,forms,div,showblocks,newpage,save,preview,print,templates,cut,copy,paste,pastetext,pastefromword,find,replace,selectall,scayt,spellchecker',
        'allowedContent': True,
        'extraAllowedContent': 'span(*)',
        'extraPlugins': 'autogrow',
        'autoGrow_minHeight': 400,
        'autoGrow_maxHeight': 1000,
    },
    'podcast': {
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Bold', 'Italic'],
            ['NumberedList', 'BulletedList'],
            ['Link', 'Unlink'],
            ['RemoveFormat'],
            ['Format'],
            ['Maximize']
        ],
        'height': 300,
        'width': '100%',
        'removePlugins': 'stylesheetparser,flash,iframe,forms,div,showblocks,newpage,save,preview,print,templates,cut,copy,paste,pastetext,pastefromword,find,replace,selectall,scayt,spellchecker',
        'allowedContent': True,
        'extraAllowedContent': 'span(*)',
        'extraPlugins': 'autogrow',
        'autoGrow_minHeight': 300,
        'autoGrow_maxHeight': 800,
    }
}

CKEDITOR_UPLOAD_PATH = "uploads/"
CKEDITOR_IMAGE_BACKEND = "pillow"
CKEDITOR_JQUERY_URL = None

# Suppress CKEditor security warning in development
if DEBUG:
    import logging
    logging.getLogger('ckeditor').setLevel(logging.ERROR)

# Security settings for production
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_REDIRECT_EXEMPT = []
    SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=False, cast=bool)
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
else:
    # Development security settings
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False

# Celery Configuration
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default=config('REDIS_URL', default='redis://localhost:6379/0'))
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default=config('REDIS_URL', default='redis://localhost:6379/0'))
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True

# Email Configuration
EMAIL_PROVIDER = config('EMAIL_PROVIDER', default='postmark')
EMAIL_API_KEY = config('EMAIL_API_KEY', default='')
EMAIL_FROM = config('EMAIL_FROM', default='hello@thehybridprotocol.com')
PUBLIC_FRONTEND_URL = config('PUBLIC_FRONTEND_URL', default='http://localhost:3000')
BASE_URL = config('BASE_URL', default='')
NEWSLETTER_VIEW_PATH = config('NEWSLETTER_VIEW_PATH', default='/newsletter-single')
BATCH_SIZE = config('BATCH_SIZE', default=500, cast=int)
RATE_SLEEP_SEC = config('RATE_SLEEP_SEC', default=0.5, cast=float)
POSTMARK_WEBHOOK_TOKEN = config('POSTMARK_WEBHOOK_TOKEN', default='')


